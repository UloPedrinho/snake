#+TITLE: Snake
#+DATE: [2020-07-05 Dom]

* tools
  - language: C++
  - libraries: SFML
* IDEAS [0/5]
  - [ ] speed
    - [ ] zones or objects
      - hot/red faster
      - cold/blue slower
  - [ ] grow/decrease
    - [ ] how to grow ? how many squares?
    - [ ] drecease (?) how many squares?
  - [ ] change direction
  - [ ] break 
    - "superpower" which can break tail, walls...
  - [ ] AI 
    - [ ] random play
    - [ ] trying to close the player
* TODO 
** STARTED classes
   :LOGBOOK:
   CLOCK: [2020-07-07 Mar 12:15]--[2020-07-07 Mar 12:45] =>  0:30
   :END:
*** TODO Game class
    - [ ] when the snake is splitted must be put in the board as part of it.
    - [ ] snake , last method call must be 'render()'
*** STARTED Board class
    - board origing(0,0) at North-West.
    - [ ] unmark_cell is useful ??
*** STARTED Snake class [7/9]
    - how the body grow: 
      - snake grows by the head in the event direction
      - when grows there's not movement
      - when eat some special type of food the body must grow by one cell (or maybe more.. food...).
      - when grow by eaten some special type of food:
        - the tail not move from the last point.
        - the current head point is added to the snake body, and so the body not move
          - if grow more than 1 cell.. the body not move until 'growing' property be equal a 0
    - [X] split body method
    - [X] use this or directly call vector size/begin/end methods ?
      #+begin_src c++
        int size;
        Point start_pos;
        Point end_pos;
      #+end_src
      - size variable is faster than call .size() method
      - 'deque' .front() and .back() methods do the job
    - [X] control limits board when grow
      - wait to game control collision ?
        - yes
    - [X] snake moves to North, South, East and West
    - [X] 'generate' method actions: 
      - [X] control growing/decreasing(growing negative?) state.
      - [X] advance every body Point when not growing/decreasing(?)
        - not necessary. pop from back when moving/decreasing and do nothing when growing at back and push front
    - [X] Is the tail or the head which grow ? the head!!!
    - [X] use 'deque' better than 'vector'
      - better performance in insert and remove operations; O(1)
      - first 'deque' elemnt is the head
      - last 'deque' element is the tail
    - [ ] refactor:
      - [ ] create direction function (?) (look at front and back)
    - [-] test
      # [2020-07-09 Thr 13:43]
      - [X] constructor
      - [ ] .render()
      - [X] .get()
      - [ ] .split()
*** TODO food
    - [ ] when put food?
*** TODO villians
** TODO comments in files and classes


