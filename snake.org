#+TITLE: Snake
#+DATE: [2020-07-05 Dom]
#+TODO: CURRENT(c!) STARTED(s!) WAITING(w!) TODO(t!) TEST(e!) BUG(b!) | DONE(d!) FIXED(f!)

* tools
  - language: C++
  - libraries: SFML
* IDEAS [0/6]
  - [ ] speed
    - [ ] zones or objects
      - hot/red faster
      - cold/blue slower
  - [ ] grow/decrease
    - [ ] how to grow ? how many squares?
    - [ ] drecease (?) how many squares?
  - [ ] change direction keys
  - [ ] change head for tail (?)
  - [ ] break 
    - "superpower" which can break tail, walls...
  - [ ] AI 
    - [ ] random play
    - [ ] trying to close the player
  - [ ] save/load options to/from file
    - snake size..etc
** next version
   - [ ] use struct to board ?
* TODO [1/5]
** DONE general [1/1]
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2020-07-10 Ven 21:20]
   :END:
   - [X] cordinates.. inverse.. 
     - solution:
       - use cartesian cordinates
       - paint function convert
** STARTED graphics [1/2]
   :LOGBOOK:
   - State "STARTED"    from "TODO"       [2020-07-14 Mar 10:17]
   - State "TODO"       from              [2020-07-10 Ven 17:14]
   :END:
*** DONE snake [3/3] 
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2020-07-14 Mar 10:20]
    :END:
    - State "TODO"       from              [2020-07-14 Mar 10:08]
    - [X] move
      - [X] not move in inverse direction
    - [X] grow
    - [X] split
*** STARTED render [3/4]
    :LOGBOOK:
    - State "TODO"       from              [2020-07-10 Ven 17:14]
    :END:
    - [X] render separatily or all in one ?
      - separatily!
    - [X] render grid
    - [X] render snake
    - [ ] render food

** TODO control colissions
   :LOGBOOK:
   - State "TODO"       from              [2020-07-14 Mar 10:18]
   :END:
   - [ ] board limit
   - [ ] snake with itself
** STARTED classes
   :LOGBOOK:
   CLOCK: [2020-07-10 Ven 12:21]--[2020-07-10 Ven 13:45] =>  1:24
   CLOCK: [2020-07-07 Mar 12:15]--[2020-07-07 Mar 12:45] =>  0:30
   :END:
*** CURRENT Game class [2/7]
    :LOGBOOK:
    CLOCK: [2020-07-10 Ven 23:25]--[2020-07-10 Ven 23:34] =>  0:09
    - State "CURRENT"    from "TODO"       [2020-07-10 Ven 23:06]
    :END:
    - [ ] .events()
    - [ ] .update()
    - [ ] .render()
    - [ ] .run()
    - [X] grid
    - [ ] when the snake is splitted must be put in the board as part of it.
      - [ ] snake method? or in game class(with a member returning the data )?
    - [X] snake , .render() and then .getSnake()
*** CURRENT Board class [2/4]
    :LOGBOOK:
    - State "CURRENT"    from "STARTED"    [2020-07-14 Mar 10:31]
    :END:
    - board origing(0,0) at North-West.
    - [X] unmark_cell is useful ??
      - not. only mark_cell. to clean put Cell::Empty enum
    - [X] use a enum (class?) for board values
    - [ ] represent snake on board ?
    - [ ] put food in board?
      - yes, so we can't control if cells are used.
*** TODO food
    - [ ] when put food?
*** TODO villians
*** DONE Snake class [9/9]
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2020-07-10 Ven 21:19]
    :END:
    - how the body grow: 
      - snake grows by the head in the event direction
      - when grows there's not movement
      - when eat some special type of food the body must grow by one cell (or maybe more.. food...).
      - when grow by eaten some special type of food:
        - the tail not move from the last point.
        - the current head point is added to the snake body, and so the body not move
          - if grow more than 1 cell.. the body not move until 'growing' property be equal a 0
    - [X] split body method
    - [X] use this or directly call vector size/begin/end methods ?
      #+begin_src c++
        int size;
        Point start_pos;
        Point end_pos;
      #+end_src
      - size variable is faster than call .size() method
      - 'deque' .front() and .back() methods do the job
    - [X] control limits board when grow
      - wait to game control collision ?
        - yes
    - [X] snake moves to North, South, East and West
    - [X] 'generate' method actions: 
      - [X] control growing/decreasing(growing negative?) state.
      - [X] advance every body Point when not growing/decreasing(?)
        - not necessary. pop from back when moving/decreasing and do nothing when growing at back and push front
    - [X] Is the tail or the head which grow ? the head!!!
    - [X] use 'deque' better than 'vector'
      - better performance in insert and remove operations; O(1)
      - first 'deque' elemnt is the head
      - last 'deque' element is the tail
    - [X] refactor:
      - [X] create direction function (?) (look at front and back)
        not possible. constructor  push at front, .render() push at back
    - [X] test
      # [2020-07-09 Thr 13:43]
      - [X] constructor
      - [X] .render()
      - [X] .get()
      - [X] .grow()
      - [X] .split()
** TODO comments in files and classes
